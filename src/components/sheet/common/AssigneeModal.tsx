// src/components/sheet/common/AssigneeModal.tsx

import { useState } from "react"
import { Mail, LinkIcon, ChevronDown, ChevronUp } from "lucide-react"
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs"
import { OverlayScrollbarsComponent } from "overlayscrollbars-react"
import "overlayscrollbars/overlayscrollbars.css"
import { AssigneeRoleDisplay } from "./AssigneeRoleDisplay"
import { Badge } from "@/components/ui/badge"

// ðŸ’¡ NEW CONVEX IMPORTS
import { useQuery, useMutation } from "convex/react"
import { api } from "../../../../convex/_generated/api"
import { Id } from "convex/_generated/dataModel"

// Define proper types
type UserRole = "owner" | "viewer" | "qa_lead" | "qa_tester"

interface User {
Â  id: any
Â  name: string
Â  email: string
Â  role: UserRole
Â  avatarUrl: string | null
Â  isCurrentUser: boolean
}

interface AssigneeModalProps {
Â  open: boolean
Â  onOpenChange: (open: boolean) => void
Â  moduleName?: string
Â  // ðŸ’¡ NEW PROPS
  sheetId: Id<"sheets">
  moduleId: Id<"modules">
}

const DUMMY_USERS: User[] = [
Â  {
Â  Â  id: "user1" as any,
Â  Â  name: "Sarah Johnson",
Â  Â  email: "sarah.johnson@company.com",
Â  Â  role: "owner",
Â  Â  avatarUrl: "https://api.dicebear.com/7.x/avataaars/svg?seed=Sarah",
Â  Â  isCurrentUser: true,
Â  },
Â  {
Â  Â  id: "user2" as any,
Â  Â  name: "Michael Chen",
Â  Â  email: "michael.chen@company.com",
Â  Â  role: "qa_lead",
Â  Â  avatarUrl: "https://api.dicebear.com/7.x/avataaars/svg?seed=Michael",
Â  Â  isCurrentUser: false,
Â  },
Â  {
Â  Â  id: "user3" as any,
Â  Â  name: "Emily Rodriguez",
Â  Â  email: "emily.rodriguez@company.com",
Â  Â  role: "qa_tester",
Â  Â  avatarUrl: "https://api.dicebear.com/7.x/avataaars/svg?seed=Emily",
Â  Â  isCurrentUser: false,
Â  },
Â  {
Â  Â  id: "user4" as any,
Â  Â  name: "David Kim",
Â  Â  email: "david.kim@company.com",
Â  Â  role: "viewer",
Â  Â  avatarUrl: null,
Â  Â  isCurrentUser: false,
Â  },
]

// ðŸ’¡ DUMMY_PENDING_REQUESTS REMOVED

export function AssigneeModal({
Â  open,
Â  onOpenChange,
Â  moduleName = "Module Name",
Â  sheetId, // Destructure new prop
Â  moduleId, // Destructure new prop
}: AssigneeModalProps) {
Â  const [usersWithAccess, setUsersWithAccess] = useState<User[]>(DUMMY_USERS)
Â  // ðŸ’¡ NEW: Fetch pending requests using useQuery
Â  const pendingRequestsQuery = useQuery(api.myFunctions.getPendingModuleAccessRequests, {
    sheetId, // This is now correctly typed as Id<"sheets">
  })
Â  // Coalesce undefined (loading) to an empty array for rendering logic
Â  const pendingRequests = pendingRequestsQuery || []

Â  // ðŸ’¡ NEW: Use useMutation for request actions
Â  const approveRequestMutation = useMutation(api.myFunctions.approveModuleAccessRequest)
Â  const declineRequestMutation = useMutation(api.myFunctions.declineModuleAccessRequest)

Â  const [searchValue, setSearchValue] = useState("")
Â  const [isAddingUser, setIsAddingUser] = useState(false)
Â  // ðŸ’¡ Use Convex Id type
Â  const [expandedRequestId, setExpandedRequestId] = useState<Id<"moduleAccessRequests"> | null>(null)
Â  // ðŸ’¡ Use Convex Id type
Â  const [processingRequests, setProcessingRequests] = useState<Set<Id<"moduleAccessRequests">>>(new Set())

Â  // ðŸ’¡ REMOVED: The useEffect hook, requestRoles state, and mapRequestedRoleToSelectValue function are removed

Â  const handleAddUser = async () => {
Â  Â  if (!searchValue.trim()) {
Â  Â  Â  alert("Please enter an email address")
Â  Â  Â  return
Â  Â  }

Â  Â  setIsAddingUser(true)

Â  Â  setTimeout(() => {
Â  Â  Â  const newUser: User = {
Â  Â  Â  Â  id: `user${Date.now()}` as any,
Â  Â  Â  Â  name: searchValue
Â  Â  Â  Â  Â  .split("@")[0]
Â  Â  Â  Â  Â  .replace(".", " ")
Â  Â  Â  Â  Â  .split(" ")
Â  Â  Â  Â  Â  .map((w) => w.charAt(0).toUpperCase() + w.slice(1))
Â  Â  Â  Â  Â  .join(" "),
Â  Â  Â  Â  email: searchValue.trim(),
Â  Â  Â  Â  role: "viewer",
Â  Â  Â  Â  avatarUrl: null,
Â  Â  Â  Â  isCurrentUser: false,
Â  Â  Â  }

Â  Â  Â  setUsersWithAccess([...usersWithAccess, newUser])
Â  Â  Â  setSearchValue("")
Â  Â  Â  setIsAddingUser(false)
Â  Â  Â  alert("User added successfully!")
Â  Â  }, 500)
Â  }

Â  Â  const handleRemoveUser = async (userId: any) => {
Â  Â  Â  Â  const user = usersWithAccess.find((u) => u.id === userId)
Â  Â  Â  Â  if (!user) return
Â  
Â  Â  Â  Â  if (!confirm(`Are you sure you want to remove user: "${user.name}" to ${moduleName}`)) {
Â  Â  Â  Â  Â  Â  return
Â  Â  Â  Â  }

Â  Â  Â  Â  setUsersWithAccess((users) => users.filter((user) => user.id !== userId))
Â  Â  }

Â  // ðŸ’¡ UPDATED: Connects to backend mutation
Â  const handleApproveRequest = async (requestId: Id<"moduleAccessRequests">) => {
Â  Â  setProcessingRequests((prev) => new Set(prev).add(requestId))

Â  Â  try {
Â  Â  Â  // Call the Convex mutation. Backend handles adding user and updating request status.
Â  Â  Â  await approveRequestMutation({ requestId })
Â  Â  Â  alert("Request approved successfully! User granted QA Tester access to the module.")
Â  Â  Â  // List updates automatically via Convex reactivity.
Â  Â  } catch (error) {
Â  Â  Â  const message =
Â  Â  Â  Â  error instanceof Error ? error.message : "Unknown error occurred"
Â  Â  Â  alert("Failed to approve request: " + message)
Â  Â  } finally {
Â  Â  Â  setProcessingRequests((prev) => {
Â  Â  Â  Â  const newSet = new Set(prev)
Â  Â  Â  Â  newSet.delete(requestId)
Â  Â  Â  Â  return newSet
Â  Â  Â  })
Â  Â  Â  if (expandedRequestId === requestId) {
Â  Â  Â  Â  setExpandedRequestId(null)
Â  Â  Â  }
Â  Â  }
Â  }

Â  // ðŸ’¡ UPDATED: Connects to backend mutation
Â  const handleDeclineRequest = async (requestId: Id<"moduleAccessRequests">) => {
Â  Â  if (!confirm("Are you sure you want to decline this access request?")) {
Â  Â  Â  return
Â  Â  }

Â  Â  setProcessingRequests((prev) => new Set(prev).add(requestId))

Â  Â  try {
Â  Â  Â  // Call the Convex mutation. Backend handles updating request status.
Â  Â  Â  await declineRequestMutation({ requestId })
Â  Â  Â  alert("Request declined successfully!")
Â  Â  Â  // List updates automatically via Convex reactivity.
Â  Â  } catch (error) {
Â  Â  Â  const message =
Â  Â  Â  Â  error instanceof Error ? error.message : "Unknown error occurred"
Â  Â  Â  alert("Failed to decline request: " + message)
Â  Â  } finally {
Â  Â  Â  setProcessingRequests((prev) => {
Â  Â  Â  Â  const newSet = new Set(prev)
Â  Â  Â  Â  newSet.delete(requestId)
Â  Â  Â  Â  return newSet
Â  Â  Â  })
Â  Â  Â  if (expandedRequestId === requestId) {
Â  Â  Â  Â  setExpandedRequestId(null)
Â  Â  Â  }
Â  Â  }
Â  }

Â  const getInitials = (name: string) => {
Â  Â  return name
Â  Â  Â  .split(" ")
Â  Â  Â  .map((n) => n[0])
Â  Â  Â  .join("")
Â  Â  Â  .toUpperCase()
Â  Â  Â  .slice(0, 2)
Â  }

Â  const getTimeAgo = (timestamp: number) => {
Â  Â  const seconds = Math.floor((Date.now() - timestamp) / 1000)

Â  Â  if (seconds < 60) return "just now"
Â  Â  if (seconds < 3600) return `${Math.floor(seconds / 60)} minutes ago`
Â  Â  if (seconds < 86400) return `${Math.floor(seconds / 3600)} hours ago`
Â  Â  if (seconds < 604800) return `${Math.floor(seconds / 86400)} days ago`
Â  Â  return `${Math.floor(seconds / 604800)} weeks ago`
Â  }

Â  return (
Â  Â  <Dialog open={open} onOpenChange={onOpenChange}>
Â  Â  Â  <DialogContent className="max-w-[520px] p-0 gap-0">
Â  Â  Â  Â  <DialogHeader className="px-6 pt-6 pb-4 space-y-0">
Â  Â  Â  Â  Â  <div className="flex items-start justify-between w-full">
Â  Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  Â  <DialogTitle className="text-xl font-normal">Assign &quot;{moduleName}&quot;</DialogTitle>
Â  Â  Â  Â  Â  Â  Â  <AssigneeRoleDisplay usersWithAccess={usersWithAccess} />
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </DialogHeader>

Â  Â  Â  Â  <div className="px-6 pb-6 space-y-6">
Â  Â  Â  Â  Â  {/* Search Input */}
Â  Â  Â  Â  Â  <div className="flex gap-2">
Â  Â  Â  Â  Â  Â  <Input
Â  Â  Â  Â  Â  Â  Â  placeholder="Add people by email"
Â  Â  Â  Â  Â  Â  Â  value={searchValue}
Â  Â  Â  Â  Â  Â  Â  onChange={(e) => setSearchValue(e.target.value)}
Â  Â  Â  Â  Â  Â  Â  className="h-12"
Â  Â  Â  Â  Â  Â  Â  onKeyDown={(e) => {
Â  Â  Â  Â  Â  Â  Â  Â  if (e.key === "Enter") {
Â  Â  Â  Â  Â  Â  Â  Â  Â  handleAddUser()
Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  <Button onClick={handleAddUser} disabled={isAddingUser || !searchValue.trim()} className="h-12">
Â  Â  Â  Â  Â  Â  Â  {isAddingUser ? "Adding..." : "Add"}
Â  Â  Â  Â  Â  Â  </Button>
Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  {/* People with access section */}
Â  Â  Â  Â  Â  <div className="space-y-4">
Â  Â  Â  Â  Â  Â  <div className="flex items-center justify-between">
Â  Â  Â  Â  Â  Â  Â  <h3 className="text-sm font-medium">People with access</h3>
Â  Â  Â  Â  Â  Â  Â  <div className="flex gap-2">
Â  Â  Â  Â  Â  Â  Â  Â  <Button variant="ghost" size="icon" className="h-8 w-8">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <LinkIcon className="h-4 w-4" />
Â  Â  Â  Â  Â  Â  Â  Â  </Button>
Â  Â  Â  Â  Â  Â  Â  Â  <Button variant="ghost" size="icon" className="h-8 w-8">
Â  Â  Â  Â  Â  Â  Â  Â  Â  <Mail className="h-4 w-4" />
Â  Â  Â  Â  Â  Â  Â  Â  </Button>
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  <Tabs defaultValue="all" className="w-full">
Â  Â  Â  Â  Â  Â  Â  <TabsList className="w-full justify-start h-auto p-0 bg-transparent border-b rounded-none">
Â  Â  Â  Â  Â  Â  Â  Â  <TabsTrigger
Â  Â  Â  Â  Â  Â  Â  Â  Â  value="all"
Â  Â  Â  Â  Â  Â  Â  Â  Â  className="rounded-none border-b-2 border-transparent data-[state=active]:border-primary data-[state=active]:bg-transparent"
Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  All
Â  Â  Â  Â  Â  Â  Â  Â  </TabsTrigger>
Â  Â  Â  Â  Â  Â  Â  Â  <TabsTrigger
Â  Â  Â  Â  Â  Â  Â  Â  Â  value="requests"
Â  Â  Â  Â  Â  Â  Â  Â  Â  className="rounded-none border-b-2 border-transparent data-[state=active]:border-primary data-[state=active]:bg-transparent"
Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Requests
Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* Use the fetched data for count */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  {pendingRequests.length > 0 && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <span className="ml-2 px-2 py-0.5 text-xs bg-primary text-primary-foreground rounded-full">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {pendingRequests.length}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  </TabsTrigger>
Â  Â  Â  Â  Â  Â  Â  </TabsList>

Â  Â  Â  Â  Â  Â  Â  <TabsContent value="all" className="mt-4 space-y-3">
Â  Â  Â  Â  Â  Â  Â  Â  {usersWithAccess === undefined ? (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-sm text-muted-foreground">Loading users...</p>
Â  Â  Â  Â  Â  Â  Â  Â  ) : usersWithAccess.length === 0 ? (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-sm text-muted-foreground">No users have access yet</p>
Â  Â  Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  Â  Â  usersWithAccess.map((person) => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div key={person.id} className="flex items-center justify-between gap-3">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center gap-3 flex-1 min-w-0">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Avatar className="h-10 w-10 flex-shrink-0">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {person.avatarUrl ? (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <AvatarImage src={person.avatarUrl || "/placeholder.svg"} alt={person.name} />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ) : null}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <AvatarFallback className="bg-muted">{getInitials(person.name)}</AvatarFallback>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </Avatar>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex-1 min-w-0">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-sm font-medium truncate">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {person.name}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {person.isCurrentUser && <span className="text-muted-foreground font-normal"> (you)</span>}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â <Badge className="ml-1" variant="outline">{person.role}</Badge>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-xs text-muted-foreground truncate">{person.email}</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center gap-2">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {!person.isCurrentUser && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Button 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  variant="remove" 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  size="sm"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => handleRemoveUser(person.id)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Remove
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </Button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  ))
Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  </TabsContent>

Â  Â  Â  Â  Â  Â  Â  <TabsContent value="requests" className="mt-4">
Â  Â  Â  Â  Â  Â  Â  Â  {/* ðŸ’¡ Check for loading state first */}
Â  Â  Â  Â  Â  Â  Â  Â  {pendingRequestsQuery === undefined ? ( 
Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-sm text-muted-foreground">Loading requests...</p>
Â  Â  Â  Â  Â  Â  Â  Â  ) : pendingRequests.length === 0 ? (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="text-center py-8">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-sm text-muted-foreground">No pending access requests</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <OverlayScrollbarsComponent
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  options={{
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  scrollbars: {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  autoHide: "leave",
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  autoHideDelay: 800,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  dragScroll: true,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  },
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  overflow: {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  x: "hidden",
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  y: "scroll",
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  },
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  style={{ maxHeight: "400px" }}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="space-y-3 pr-1"
Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="space-y-3">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* Use data from Convex */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {pendingRequests.map((request) => {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  const requestId = request._id as Id<"moduleAccessRequests">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  const isProcessing = processingRequests.has(requestId)

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  return (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div key={requestId} className="rounded-lg border bg-muted/30 overflow-hidden">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center justify-between gap-3 p-3">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center gap-3 flex-1 min-w-0">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Avatar className="h-10 w-10 flex-shrink-0">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* Use requesterImage */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {request.requesterImage ? (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <AvatarImage src={request.requesterImage || "/placeholder.svg"} alt={request.requesterName} />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ) : null}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* Use requesterName */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <AvatarFallback className="bg-muted">{getInitials(request.requesterName)}</AvatarFallback>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </Avatar>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex-1 min-w-0">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* Use requesterName */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-sm font-medium truncate">{request.requesterName}</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* Use requesterEmail */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-xs text-muted-foreground truncate">{request.requesterEmail}</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-xs text-muted-foreground mt-0.5">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* Use _creationTime */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Requested {getTimeAgo(request._creationTime)} 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center gap-2">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Button
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  variant="default"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  size="sm"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="h-9"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() =>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  setExpandedRequestId(expandedRequestId === requestId ? null : requestId)
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  disabled={isProcessing}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {expandedRequestId === requestId ? (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Hide Details
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <ChevronUp className="h-4 w-4 ml-1" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  View Details
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <ChevronDown className="h-4 w-4 ml-1" />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </Button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {expandedRequestId === requestId && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="px-3 pb-3 pt-0 border-t mt-3 space-y-4">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="pt-3 space-y-3">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {/* Use request.message */}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {request.message && request.message !== "No message provided" && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-xs font-medium text-muted-foreground mb-1">Message</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-sm text-muted-foreground leading-relaxed">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {request.message}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center justify-end pt-2">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center gap-2">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Button
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  variant="default"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  size="sm"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="h-9"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => handleApproveRequest(requestId)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  disabled={isProcessing}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {isProcessing ? "Processing..." : "Approve"}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </Button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Button
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  variant="outline"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  size="sm"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="h-9 bg-transparent"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => handleDeclineRequest(requestId)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  disabled={isProcessing}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Decline
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </Button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  })}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </OverlayScrollbarsComponent>
Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  </TabsContent>
Â  Â  Â  Â  Â  Â  </Tabs>
Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  {/* Action buttons */}
Â  Â  Â  Â  Â  <div className="flex justify-end pt-2">
Â  Â  Â  Â  Â  Â 
Â  Â  Â  Â  Â  Â  <Button onClick={() => onOpenChange(false)}>Done</Button>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  Â  </DialogContent>
Â  Â  </Dialog>
Â  )
}