// src/components/sheet/detail-page.tsx
import { useQuery } from "convex/react";
import { api } from "../../../convex/_generated/api";
import { useNavigate, useParams } from "react-router-dom";

import { isAltTextTestCase, isFunctionalityTestCase } from "@/utils/typeGuards";
import { AltTextAriaLabelTable } from "./alttextarialabel/AltTextAriaLabelTable";
import { FunctionalityTestCasesTable } from "./functionality/FunctionalityTestCasesTable";
import { Header } from "./Header";
import { AccessRequest } from "./access-request";

// ðŸ’¡ FIX 1: Explicitly define the SheetType here to resolve the type error when 
// passing testCaseType to the Header component.
type SheetType = "altTextAriaLabel" | "functionality";

export function DetailPage() {
Â  const navigate = useNavigate();
Â  const { sheetId } = useParams();

Â  const queryResult = useQuery(
Â  Â  api.myFunctions.getTestCasesForSheet,
Â  Â  sheetId ? { sheetId } : "skip",
Â  );

Â  const onBack = () => {
Â  Â  void navigate("/");
Â  };

Â  if (queryResult === undefined) {
Â  Â  return <div className="p-4 text-center">Loading sheet...</div>;
Â  }

Â  // âœ… Check if the result indicates access denied
Â  if (queryResult && typeof queryResult === 'object' && 'accessDenied' in queryResult) {
Â  Â  // Show sign-in prompt for unauthenticated users
Â  Â  if (queryResult.requiresAuth) {
Â  Â  Â  return (
Â  Â  Â  Â  <div className="min-h-screen flex items-center justify-center bg-gray-50">
Â  Â  Â  Â  Â  <div className="max-w-md w-full bg-white rounded-lg shadow-lg p-8 text-center">
Â  Â  Â  Â  Â  Â  <h2 className="text-2xl font-semibold mb-4">Sign in required</h2>
Â  Â  Â  Â  Â  Â  <p className="text-gray-600 mb-6">
Â  Â  Â  Â  Â  Â  Â  You need to sign in to access this sheet.
Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  onClick={() => navigate("/signin")}
Â  Â  Â  Â  Â  Â  Â  className="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 transition-colors"
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Sign in
Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  Â  );
Â  Â  }
Â  Â  
Â  Â  // Show access request for authenticated users without permission
Â  Â  return <AccessRequest />;
Â  }

Â  // Handle null case (sheet not found)
Â  if (queryResult === null) {
Â  Â  return (
Â  Â  Â  <div className="min-h-screen flex items-center justify-center bg-gray-50">
Â  Â  Â  Â  <div className="max-w-md w-full bg-white rounded-lg shadow-lg p-8 text-center">
Â  Â  Â  Â  Â  <h2 className="text-2xl font-semibold mb-4">Sheet not found</h2>
Â  Â  Â  Â  Â  <p className="text-gray-600 mb-6">
Â  Â  Â  Â  Â  Â  The sheet you're looking for doesn't exist or has been deleted.
Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  onClick={onBack}
Â  Â  Â  Â  Â  Â  className="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 transition-colors"
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Go back to dashboard
Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  </div>
Â  Â  Â  </div>
Â  Â  );
Â  }

Â  const { sheet, testCaseType, testCases } = queryResult;

Â  const renderTable = () => {
Â  Â  if (!sheetId) {
Â  Â  Â  return <div className="p-4 text-center">Invalid sheet ID.</div>;
Â  Â  }

Â  Â  if (testCaseType === "functionality") {
Â  Â  Â  const functionalityTestCases = testCases.filter(isFunctionalityTestCase);
Â  Â  Â  return (
Â  Â  Â  Â  <FunctionalityTestCasesTable 
Â  Â  Â  Â  Â  testCases={functionalityTestCases}
Â  Â  Â  Â  Â  sheetId={sheetId}
Â  Â  Â  Â  />
Â  Â  Â  );
Â  Â  } else if (testCaseType === "altTextAriaLabel") {
Â  Â  Â  const altTextTestCases = testCases.filter(isAltTextTestCase);
Â  Â  Â  return (
Â  Â  Â  Â  <AltTextAriaLabelTable
Â  Â  Â  Â  Â  testCases={altTextTestCases}
Â  Â  Â  Â  Â  sheetId={sheetId}
Â  Â  Â  Â  />
Â  Â  Â  );
Â  Â  }
Â  Â  return (
Â  Â  Â  <div className="p-4 text-center">
Â  Â  Â  Â  No test case type specified for this sheet.
Â  Â  Â  </div>
Â  Â  );
Â  };

Â  return (
Â  Â  <div className="bg-white min-h-screen font-sans">
Â  Â  Â  <Header 
Â  Â  Â  Â  Â  sheetName={sheet?.name} 
Â  Â  Â  Â  Â  onBack={onBack} 
Â  Â  Â  Â  Â  sheetId={sheetId!} 
Â  Â  Â  Â  Â  sheetType={testCaseType as SheetType} // âœ… FIX 2: Use a type assertion to match the required prop type
Â  Â  Â  />
Â  Â  Â  <main className="flex-1 bg-white p-4">{renderTable()}</main>
Â  Â  </div>
Â  );
}